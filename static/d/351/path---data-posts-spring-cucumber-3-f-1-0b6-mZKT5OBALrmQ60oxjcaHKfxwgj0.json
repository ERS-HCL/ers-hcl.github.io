{"data":{"markdownRemark":{"html":"<h2>OBJECTIVE</h2>\n<ul>\n<li>Create a reference implementation which provides the best practices of running integration &#x26; component tests in a SpringBoot application</li>\n<li>While Rest Assured provides an excellent DSL to quickly create component and integration tests , using Cucumber will provide us a not only creating readable and maintainable code , but also being able communicate the requirements across various stakeholdes in a human readable language.</li>\n<li>Gherkin (used by Cucumber to define the automated tests) along with Rest Assured provides a very effective solution for the same.</li>\n<li>For Component level tests - we can mock the external apis </li>\n<li>For Integration level tests - a different provide can be used to use actual APIs rather than mocks</li>\n</ul>\n<h3>TECHNOLOGIES</h3>\n<ul>\n<li>Spring Boot Test - Provides the spring boot ecosystem required for the tests</li>\n<li>Rest Assured - Provides the service client APIs using the powerful DSL for creating maintainable tests</li>\n<li>Rest Assured JSON Schema Validator - Response Schema Validation</li>\n<li>Hamcrest - Assertions</li>\n<li>Swagger Request Validator for Rest Assured (<code>swagger-request-validator-restassured</code>) - Use Rest Assured to validate the API response using the swagger spec (TBD)</li>\n<li>Cucumber (with Spring Boot) - BDD based Integration Test and Component Tests</li>\n<li>\n<p>Spring Cloud Contract WireMock</p>\n<ul>\n<li>The WireMock server is setup using the <code>@AutoConfigureWireMock(port = 8090)</code> annotation</li>\n<li>Also mock responses are setup either programmatically wiremock APIs using the json files or placing the wiremock stubs in the <a href=\"src/test/resources/mappings\">test/resource/mappings</a> folder</li>\n<li>As an example the google books api has been wiremock stub has been recorded using the <a href=\"http://wiremock.org/docs/record-playback/\">wiremock standalone server</a> </li>\n<li>The programmaticaly created wiremock stubs are demonstrated in the files <a href=\"src/test/java/com/tsukhu/demo/steps/OrderSteps.java\">OrderSteps</a> and <a href=\"src/test/java/com/tsukhu/demo/steps/SwapiSteps.java\">SwapiSteps</a> </li>\n</ul>\n</li>\n<li>\n<p>Spring Profiles to use the same test using the mock server or hitting the actual endpoints</p>\n<ul>\n<li><code>Dev Mode</code> - All external endpoints are provided using the WireMock server that serves the responses via stubs and mock json output</li>\n<li><code>Integration Mode</code> - Actual endpoints are hit</li>\n</ul>\n</li>\n<li>\n<p>Automatic Pact file generation for each of the test scenarios , based on the registered Pact listeners using <code>wiremock-pact-generator</code></p>\n<ul>\n<li>This can be extended to push the generated pact files to the Pact broker</li>\n<li>This is enabled in the <code>dev</code> profile and at the end of the execution the <code>target\\pacts</code> folder contains the generated pact files</li>\n<li>\n<p>Advantage</p>\n<ul>\n<li>No need of writing separate pact consumer tests.</li>\n<li>This ensures that what tests you write as BDD cucumber tests also double up as pact tests</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>PROJECT DETAILS</h2>\n<img src=\"/project/images/spring-cucumber.png\" alt=\"BDD\" width=\"550\" height=\"300\">\n<ul>\n<li>Project URL <a href=\"https://github.com/ERS-HCL/springboot-cucumber-demo\">https://github.com/ERS-HCL/springboot-cucumber-demo</a></li>\n</ul>\n<h2>CONTRIBUTOR(S)</h2>\n<p>Tarun Sukhu <a href=\"mailto:tsukhu@hcl.com\">tsukhu@hcl.com</a></p>","frontmatter":{"title":"SpringBoot based integration testing for microservices using Cucumber and Rest Assured","author":"Tarun Sukhu <tsukhu@hcl.com>"}}},"pageContext":{"slug":"/data/posts/spring-cucumber/"}}