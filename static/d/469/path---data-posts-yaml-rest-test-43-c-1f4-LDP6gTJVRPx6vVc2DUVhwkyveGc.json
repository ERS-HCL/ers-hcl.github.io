{"data":{"markdownRemark":{"html":"<p>This test framework lets you write your test cases in in simple YAML format. Currently only json response is supported. We use JsonPath and JsonUnit and Java regular expression libraries to provide you simple and elegant way of validating your json response. You can select a subset of json response by providing JsonPath expression and/or regular expression then validate it with JsonUnit. You can also combine multiple JsonPath expressions and regular expressions in a Unix like pipe fashion to precisely select a subset of json response and then validate it.</p>\n<p>Read below simple example.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\ntestGroup:\n- name: Simple test group\n  tests:\n  - name: simple test\n    request: # Define http request parameters e.g. uri, method, cookie, header\n      uri: https://httpbin.org/get?foo=vs1&amp;foo=v2\n      method: post # http method get/post/put/delete\n      headers: # set headers\n        content-type: application/json\n        uuid: uuid-1\n      cookies: # set cookies\n        cookie1: kookie1\n        cookie2: kookie2\n      body: | # post payload\n        {&quot;a&quot;:&quot;b&quot;  &quot;c&quot;:&quot;d&quot;}\n    response: # test response\n      status: 200 # test that http response status code 200\n      headers: # test header data\n        content-type: application/json # test content-type header value is application/json\n      cookies: # test cookies data\n        cookie1: kookie1 # test cookie1 value is kookie1\n        cookie2: kookie2\n      body: # test response body\n        asserts: # add multiple assert statements\n        - select: jsonpath args | jsonpath foo  # use unix like pipe feature to filter http response data in multiple stages\n          value: [&quot;vs1&quot;,&quot;v2&quot;] # expected output\n        - select: jsonpath args | jsonpath foo | regex v\\d # from the htpp response data get jsonpath expression &quot;args&quot; value then from the output get jsonpah expression &quot;foo&quot; value then from the output run regular expression &quot;v\\d&quot;\n          value: v2</code></pre></div>\n<h1 id=\"quick-setup-steps\"><a href=\"#quick-setup-steps\" aria-label=\"quick setup steps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick setup steps</h1>\n<p>This is a Java Maven project. Java 1.8 and Maven is required. Follow below steps to quickly run sample tests or create your test.</p>\n<ul>\n<li>Clone this project into a directory.</li>\n<li>Run “mvn clean verify” to run sample tests defined in test-1.yaml and test-2.yaml files in “src/test/resources” directory.</li>\n<li>To define your tests create new test files in “src/test/resources” directory and change “server.port”, “server.baseURI” and “testFiles” properties in “src/test/resources/configuration.properties” file.</li>\n</ul>\n<h1 id=\"extra-setup-steps\"><a href=\"#extra-setup-steps\" aria-label=\"extra setup steps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extra setup steps</h1>\n<ul>\n<li>If you have multiple environments dev, test etc. and you want to create separate set of tests for each environment then create test files for each environment. Create new configuration file with “configuration-environment.properties” where “environment” is the name of environment. Change “server.port”, “server.baseURI” and “testFiles” properties value.</li>\n<li>Run “mvn clean verify -Denv=environment” where “environment” is the name of environment to run test.</li>\n<li>If you want to run test from Eclipse IDE then import this maven project into Eclipse and right click “MainTest” class and run it as junit test. This test framework uses Junit5 so Eclipse IDE  Oxygen.2 Release (4.7.2) or higher is supported but you can run test as maven from lower version of Eclipse.</li>\n</ul>\n<h1 id=\"ssl-certificates-support\"><a href=\"#ssl-certificates-support\" aria-label=\"ssl certificates support permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSL certificates support</h1>\n<p>If you are using HTTPS protocol then you need to add certificates in “src/test/resources/configuration.properties” file like follows. Go to references to know how to export certificates. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">certificates=certificates/httpbin.cer,certificates/alice.crt, certificates/bob.crt, certificates/carol.crt</code></pre></div>\n<h2 id=\"how-to-write-test-cases\"><a href=\"#how-to-write-test-cases\" aria-label=\"how to write test cases permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to write test cases?</h2>\n<p>Quickest way to start is to read “src/test/resources/test-1.yaml” test file.</p>\n<p>A test case is a REST API call with HTTP request data to be sent to a server and HTTP response data to be verified by the framework. A test group is a collection of test cases to be executed in a defined sequence.</p>\n<p>Basic structure of simple test case is follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">testGroup: # array of test group.\n- name: # name of a test group\n\n  tests: # array of test cases\n  - name: # name of tes case\n\n    request: # http request data to be sent\n      uri: # uri, host name, port are defined in configuration.properties file\n      method: #http request method get/post/put/delete\n      parameters: # form parameters\n        name1: value1 # name value pair\n        name2: value2\n      headers: # request headers \n        name1: value1 # name value pair\n        name2: value2\n      cookies: #request cookies\n        name1: value1 # name value pair\n        name2: value2\n      body: value #request body data\n\n    response: #http response data to be verified\n      status: # response status code\n      headers: # response headers\n        name1: value1 # name value pair\n        name2: value2\n      cookies: #  response cookies\n        name1: value1 # name value pair\n        name2: value2\n      body: # response body data verification\n       asserts: # you can write multiple asserts to validate different part of json response\n       - select: #jsonpath / reqular expressions\n         value: # value to be matched\n       - select:\n         value: </code></pre></div>\n<ul>\n<li>Examples - Create test groups</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">testGroup:\n  -\n     name: first test group\n     skip: true/false #if you want to skip this testGroup from execution set value to true/false\n  -\n     name: second test group\n     skip: false\n     .....</code></pre></div>\n<ul>\n<li>Example - Create tests</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">testGroup:\n  -\n     ....\n     tests:\n            -\n                name: first rest call\n                request:\n                    uri: /cart/get/cart/${cartId} # request uri hostname and port is picked up from baseURI from application.properties file.\n                    method: get/post/put/delete # use any of these values\n                    headers: # create key value pairs of headers and its values\n                        content-type: {$contentType}\n                    cookie: # create key value pairs of cookies and its values\n                    body: | # send following json as request payload\n                        {\n                            &quot;a&quot;:&quot;b&quot;,\n                            &quot;c&quot;:&quot;d&quot;\n                        }\n                response:\n                    status: ${status} # assert that http response status is 200\n                    header: # add key value pairs to assert on header values\n                        content-type: {$contentType} #assert that content-type header value\n                    body:\n                        asserts: # add multiple assert key value pairs\n                            -\n                                select: jsonpath args.foo # json path expression to be used to get value from response body\n                                value: |\n                                       [v1,v2] # if the return value from json path is list of atomic values you can match them with comma separated values like this.\n                            -\n                                select: jsonpath args # json path expression\n                                value: | # expected json value\n                                    {\n                                        &quot;foo&quot;: [\n                                        &quot;v1&quot;,\n                                        &quot;v2&quot;\n                                        ]\n                                    }\n                            - \n                                select: jsonpath args | jsonpath foo | regex v\\d # from the htpp response data get jsonpath expression &quot;args&quot; value then from the output get jsonpah expression &quot;foo&quot; value then from the output run regular expression &quot;v\\d&quot;\n                                value: v2</code></pre></div>\n<h2 id=\"how-to-use-variables\"><a href=\"#how-to-use-variables\" aria-label=\"how to use variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use variables.</h2>\n<p>Variables can be defined inside the initGroup and they have global scope. You can reference these variables like <strong>${variableName}</strong> in the request header, cookies, body and uri values and response header, cookies and assert values. You can also assign values to these variables from response and refer the value in subsequent tests.</p>\n<ul>\n<li>Example - Define variable :</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">initGroup:\n  variables:\n    status: 200 #status variable is created with intial value of 200 \n    contentType: &quot;application/json&quot; # contentType variable is created with initial value of application/json\n    cartId: cid-1001\n    uuid: # create uuid variable with null value\n    country: US</code></pre></div>\n<ul>\n<li>Example - Use variables</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">testGroup:\n  -\n     name: ....\n     tests:\n       -\n          request:\n            uri: /get/cart/${cartId} # this is how you can use a variable inside uri.\n            headers:\n              content-type: {$contentType} # send content-type=application/json header in the request\n            cookies:\n              country: {$country} # send country=US cookie in the request\n            response:\n              status: {$status} # assert that http response status is 200\n            header:\n              content-type: {$contentType} #assert that content-type header is application/json</code></pre></div>\n<ul>\n<li>\n<p>Example - Assign value to a variable from response.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">testGroup:</code></pre></div>\n</li>\n<li>\n<p>-\nname: …\ntests:\n-\nrequest:\n…\nresponse:\n…\n…\nvariables:\nuuid: header.uuid # assign uuid header value to uuid variable defined in the initGroup. if variable not defined new variable will be created.\nsessionId:  cookie.session-id # assign session-id cookie value to sessionId variable.\nskuId: body.response.skuId # assign value extracted from json response using “response.skuId” JsonPath expression for json path expression refer <a href=\"https://github.com/json-path/JsonPath\">https://github.com/json-path/JsonPath</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n</ul>\n<h2 id=\"how-to-do-json-comparison\"><a href=\"#how-to-do-json-comparison\" aria-label=\"how to do json comparison permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to do Json comparison</h2>\n<p>Read  <a href=\"https://github.com/lukas-krecan/JsonUnit\">https://github.com/lukas-krecan/JsonUnit</a></p>\n<h2 id=\"how-to-write-jsonpath-expression\"><a href=\"#how-to-write-jsonpath-expression\" aria-label=\"how to write jsonpath expression permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to write JsonPath expression</h2>\n<p>Read <a href=\"https://github.com/json-path/JsonPath\">https://github.com/json-path/JsonPath</a></p>\n<h2 id=\"how-to-write-regular-expression\"><a href=\"#how-to-write-regular-expression\" aria-label=\"how to write regular expression permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to write regular expression</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\">https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html</a></p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"http://docs.bvstools.com/home/ssl-documentation/exporting-certificate-authorities-cas-from-a-website\">http://docs.bvstools.com/home/ssl-documentation/exporting-certificate-authorities-cas-from-a-website</a></li>\n</ul>\n<h2 id=\"project-details\"><a href=\"#project-details\" aria-label=\"project details permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PROJECT DETAILS</h2>\n<ul>\n<li>Project URL <a href=\"https://github.com/ERS-HCL/rest-yaml-test\">https://github.com/ERS-HCL/rest-yaml-test</a></li>\n</ul>\n<h2 id=\"contributors\"><a href=\"#contributors\" aria-label=\"contributors permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CONTRIBUTOR(S)</h2>\n<p>Kamran Khan <a href=\"mailto:kamran.khan@hcl.com\">kamran.khan@hcl.com</a></p>","frontmatter":{"title":"YAML Based Automated Spring Boot Testing","author":"Kamran Khan <kamran.khan@hcl.com>"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/data/posts/yaml-rest-test/"}}