{"data":{"markdownRemark":{"html":"<h2 id=\"objective\"><a href=\"#objective\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OBJECTIVE</h2>\n<ul>\n<li>Create a reference implementation which provides the best practices of running integration &#x26; component tests in a SpringBoot application</li>\n<li>While Rest Assured provides an excellent DSL to quickly create component and integration tests , using Cucumber will provide us a not only creating readable and maintainable code , but also being able communicate the requirements across various stakeholdes in a human readable language.</li>\n<li>Gherkin (used by Cucumber to define the automated tests) along with Rest Assured provides a very effective solution for the same.</li>\n<li>For Component level tests - we can mock the external apis </li>\n<li>For Integration level tests - a different provide can be used to use actual APIs rather than mocks</li>\n</ul>\n<h3 id=\"technologies\"><a href=\"#technologies\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TECHNOLOGIES</h3>\n<ul>\n<li>Spring Boot Test - Provides the spring boot ecosystem required for the tests</li>\n<li>Rest Assured - Provides the service client APIs using the powerful DSL for creating maintainable tests</li>\n<li>Rest Assured JSON Schema Validator - Response Schema Validation</li>\n<li>Hamcrest - Assertions</li>\n<li>Swagger Request Validator for Rest Assured (<code class=\"language-text\">swagger-request-validator-restassured</code>) - Use Rest Assured to validate the API response using the swagger spec (TBD)</li>\n<li>Cucumber (with Spring Boot) - BDD based Integration Test and Component Tests</li>\n<li>\n<p>Spring Cloud Contract WireMock</p>\n<ul>\n<li>The WireMock server is setup using the <code class=\"language-text\">@AutoConfigureWireMock(port = 8090)</code> annotation</li>\n<li>Also mock responses are setup either programmatically wiremock APIs using the json files or placing the wiremock stubs in the <a href=\"src/test/resources/mappings\">test/resource/mappings</a> folder</li>\n<li>As an example the google books api has been wiremock stub has been recorded using the <a href=\"http://wiremock.org/docs/record-playback/\">wiremock standalone server</a> </li>\n<li>The programmaticaly created wiremock stubs are demonstrated in the files <a href=\"src/test/java/com/tsukhu/demo/steps/OrderSteps.java\">OrderSteps</a> and <a href=\"src/test/java/com/tsukhu/demo/steps/SwapiSteps.java\">SwapiSteps</a> </li>\n</ul>\n</li>\n<li>\n<p>Spring Profiles to use the same test using the mock server or hitting the actual endpoints</p>\n<ul>\n<li><code class=\"language-text\">Dev Mode</code> - All external endpoints are provided using the WireMock server that serves the responses via stubs and mock json output</li>\n<li><code class=\"language-text\">Integration Mode</code> - Actual endpoints are hit</li>\n</ul>\n</li>\n<li>\n<p>Automatic Pact file generation for each of the test scenarios , based on the registered Pact listeners using <code class=\"language-text\">wiremock-pact-generator</code></p>\n<ul>\n<li>This can be extended to push the generated pact files to the Pact broker</li>\n<li>This is enabled in the <code class=\"language-text\">dev</code> profile and at the end of the execution the <code class=\"language-text\">target\\pacts</code> folder contains the generated pact files</li>\n<li>\n<p>Advantage</p>\n<ul>\n<li>No need of writing separate pact consumer tests.</li>\n<li>This ensures that what tests you write as BDD cucumber tests also double up as pact tests</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"project-details\"><a href=\"#project-details\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PROJECT DETAILS</h2>\n<img src=\"/project/images/spring-cucumber.png\" alt=\"BDD\" width=\"550\" height=\"300\">\n<ul>\n<li>Project URL <a href=\"https://github.com/ERS-HCL/springboot-cucumber-demo\">https://github.com/ERS-HCL/springboot-cucumber-demo</a></li>\n</ul>\n<h2 id=\"contributors\"><a href=\"#contributors\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CONTRIBUTOR(S)</h2>\n<p>Tarun Sukhu <a href=\"mailto:tsukhu@hcl.com\">tsukhu@hcl.com</a></p>","frontmatter":{"title":"SpringBoot based integration testing for microservices using Cucumber and Rest Assured","author":"Tarun Sukhu <tsukhu@hcl.com>"}}},"pageContext":{"slug":"/data/posts/spring-cucumber/"}}