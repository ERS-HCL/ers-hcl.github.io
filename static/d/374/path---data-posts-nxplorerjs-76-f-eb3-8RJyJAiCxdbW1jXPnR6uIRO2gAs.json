{"data":{"markdownRemark":{"html":"<h2>PROJECT NAME</h2>\n<ul>\n<li>nxplorerjs-microservice-starter</li>\n</ul>\n<h2>OBJECTIVE</h2>\n<ul>\n<li>Cloud Native Node JS Express Reactive Microservice Starter Template (REST/GraphQL)</li>\n<li>This project provides complete Node JS / Typescript based microservices template with all that will be needed features for production deployment , monitoring , debugging , logging , security , CI/CD. </li>\n<li>Reactive extensions based samples are added as well to demonstrate how this can be used for building a microservice API edge-service , a backend for frontend or use it as a base for building any kind of microservice.</li>\n</ul>\n<h2>Design Principles</h2>\n<ul>\n<li>Use best of breed modules to create a production ready microservice framework</li>\n<li>Based on the 12-factor app principles</li>\n<li>No custom code or wrappers so that any developer can modify/replace any of the modules or implementation</li>\n<li>Design patterns for implementation that can be used as a reference</li>\n<li>Modular , replacable and plug and play code</li>\n<li>Provide a starter for both the business APIs and microservice platform development.</li>\n<li>DevOps ready with code quality, unit &#x26; integration tests, deployment automated.</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>Node JS, Express, Typescript , Dependency Injection base</li>\n<li>Backpack (webpack) based - build , development , packaging</li>\n<li>Swagger Enabled - Express swagger middleware / Swagger UI integration</li>\n<li>GraphQL based on Apollo Server 2.0 with JWT security , data loader and REST data source samples</li>\n<li>Support for GraphQL SDL via graphql-import</li>\n<li>GraphQL mock resolvers (optional) during development - graphql-tools</li>\n<li>GraphQL based client wrapper APIs - graphql-request</li>\n<li>REST APIs - using Inversify Controller</li>\n<li>Externalized Configuration - DotEnv (Settings, Env specific API URLs)</li>\n<li>Tests - Jest , SuperTest , GraphQL Tester. Infrastructure for automated unit and integration tests</li>\n<li>Code Coverage - Istanbul</li>\n<li>Code Quality - tslint</li>\n<li>Container support - Docker , Kubernetes Clusters</li>\n<li>Helm Chart based deployment support</li>\n<li>Prometheus integration</li>\n<li>API Response Logging , Express Server Logging , UUID propogation - Pino</li>\n<li>Reactive Extensions support - RxJS6</li>\n<li>CORS, JSONObject Limit , Helmet , CSRF - Express Security</li>\n<li>IOC / Dependency Injection / Express Annotation based APIs - Inversify</li>\n<li>Documentation - TypeDocs</li>\n<li>API Exception Handling Utilities</li>\n<li>Standard HTTP Codes for cleaner code</li>\n<li>Sample APIs, Patterns for reference</li>\n<li>Sonar Qube integration</li>\n<li>Hystrix Circuit Breaker Support (Using Brakes)</li>\n<li>JWT Based API Security - jsonwebtoken, express-jwt</li>\n<li>Now using the super fast pino logger for all logging needs</li>\n<li>Additional performance time logging built in</li>\n</ul>\n<h2>PROJECT DETAILS</h2>\n<img src=\"/project/images/express-microservice-starter.png\" alt=\"Express Microservice\" width=\"500\" height=\"300\">\n<ul>\n<li>Project URL <a href=\"https://github.com/ERS-HCL/nxplorerjs-microservice-starter\">https://github.com/ERS-HCL/nxplorerjs-microservice-starter</a></li>\n</ul>\n<h2>CONTRIBUTOR(S)</h2>\n<p>Tarun Kumar Sukhu (tsukhu@hcl.com)</p>","frontmatter":{"title":"Nxplorer Microservice Stater","author":"Tarun Sukhu <tsukhu@hcl.com>"}}},"pageContext":{"slug":"/data/posts/nxplorerjs/"}}