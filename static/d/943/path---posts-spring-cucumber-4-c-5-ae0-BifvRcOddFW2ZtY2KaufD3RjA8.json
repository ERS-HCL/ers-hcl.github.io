{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SpringBoot based integration testing for microservices using Cucumber and Rest Assured\",\n  \"date\": \"2018-11-21\",\n  \"author\": \"Tarun Sukhu <tsukhu@hcl.com>\",\n  \"tags\": \"springboot, cucumber, bdd, rest assured\",\n  \"excerpt\": \"A reference implementation which provides the best practices of running integration & component tests in a SpringBoot application\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"OBJECTIVE\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a reference implementation which provides the best practices of running integration & component tests in a SpringBoot application\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"While Rest Assured provides an excellent DSL to quickly create component and integration tests , using Cucumber will provide us a not only creating readable and maintainable code , but also being able communicate the requirements across various stakeholdes in a human readable language.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gherkin (used by Cucumber to define the automated tests) along with Rest Assured provides a very effective solution for the same.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For Component level tests - we can mock the external apis \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For Integration level tests - a different provide can be used to use actual APIs rather than mocks\")), mdx(\"h3\", null, \"TECHNOLOGIES\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring Boot Test - Provides the spring boot ecosystem required for the tests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rest Assured - Provides the service client APIs using the powerful DSL for creating maintainable tests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rest Assured JSON Schema Validator - Response Schema Validation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hamcrest - Assertions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Swagger Request Validator for Rest Assured (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"swagger-request-validator-restassured\"), \") - Use Rest Assured to validate the API response using the swagger spec (TBD)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cucumber (with Spring Boot) - BDD based Integration Test and Component Tests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring Cloud Contract WireMock\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The WireMock server is setup using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@AutoConfigureWireMock(port = 8090)\"), \" annotation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Also mock responses are setup either programmatically wiremock APIs using the json files or placing the wiremock stubs in the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"src/test/resources/mappings\"\n  }), \"test/resource/mappings\"), \" folder\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As an example the google books api has been wiremock stub has been recorded using the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://wiremock.org/docs/record-playback/\"\n  }), \"wiremock standalone server\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The programmaticaly created wiremock stubs are demonstrated in the files \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"src/test/java/com/tsukhu/demo/steps/OrderSteps.java\"\n  }), \"OrderSteps\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"src/test/java/com/tsukhu/demo/steps/SwapiSteps.java\"\n  }), \"SwapiSteps\"), \" \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring Profiles to use the same test using the mock server or hitting the actual endpoints\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dev Mode\"), \" - All external endpoints are provided using the WireMock server that serves the responses via stubs and mock json output\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Integration Mode\"), \" - Actual endpoints are hit\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automatic Pact file generation for each of the test scenarios , based on the registered Pact listeners using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"wiremock-pact-generator\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This can be extended to push the generated pact files to the Pact broker\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is enabled in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dev\"), \" profile and at the end of the execution the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"target\\\\pacts\"), \" folder contains the generated pact files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Advantage\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No need of writing separate pact consumer tests.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This ensures that what tests you write as BDD cucumber tests also double up as pact tests\")))))), mdx(\"h2\", null, \"PROJECT DETAILS\"), mdx(Image, {\n    imageName: \"spring-cucumber-demo\",\n    bypassImage: true,\n    mdxType: \"Image\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Project URL \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/ERS-HCL/springboot-cucumber-demo\"\n  }), \"https://github.com/ERS-HCL/springboot-cucumber-demo\"))), mdx(\"h2\", null, \"CONTRIBUTOR(S)\"), mdx(\"p\", null, \"Tarun Sukhu\"));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"SpringBoot based integration testing for microservices using Cucumber and Rest Assured","author":"Tarun Sukhu <tsukhu@hcl.com>","heroImage":null,"heroHeading":null,"heroSubHeading":null,"heroTextColor":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/spring-cucumber/"}}